# Copyright (c) 2020, Yung-Yu Chen <yyc@solvcon.net>
# All rights reserved.
# 
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# - Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.
# - Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.
# - Neither the name of the copyright holder nor the names of its contributors
#   may be used to endorse or promote products derived from this software without
#   specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

name: modmesh_pytest

on:
  push:
  pull_request:
  schedule:
    - cron: '34 17 * * *'

jobs:
  build:

    runs-on: ${{ matrix.os }}

    strategy:
        matrix:
          os: [ubuntu-20.04, macos-11]
          cmake_build_type: [Release, Debug]

        fail-fast: false

    steps:

    - uses: actions/checkout@v1
      with:
        fetch-depth: 1

    - name: dependency (ubuntu)
      if: matrix.os != 'macos-11'
      run: |
        sudo apt-get -qqy update
        sudo apt-get -qy install \
            sudo curl git build-essential make cmake libc6-dev gcc-10 g++-10 \
            clang-tidy-10 \
            python3 python3-dev python3-venv
        sudo ln -s "$(which clang-tidy-10)" "$(dirname $(which clang-tidy-10))/clang-tidy"
        sudo pip3 install setuptools
        sudo pip3 install numpy pytest flake8

    - name: dependency (macos)
      if: matrix.os == 'macos-11'
      run: |
        brew install python3 llvm
        ln -s "$(brew --prefix llvm)/bin/clang-format" "/usr/local/bin/clang-format"
        ln -s "$(brew --prefix llvm)/bin/clang-tidy" "/usr/local/bin/clang-tidy"
        echo "which pip3: $(which pip3)"
        pip3 install -U setuptools
        pip3 install -U numpy pytest flake8

    - name: dependency (manual)
      run: sudo ${GITHUB_WORKSPACE}/contrib/dependency/install.sh pybind11

    - name: show dependency
      run: |
        echo "gcc path: $(which gcc)"
        echo "gcc version: $(gcc --version)"
        echo "cmake path: $(which cmake)"
        echo "cmake version: $(cmake --version)"
        echo "python3 path: $(which python3)"
        echo "python3 version: $(python3 --version)"
        echo "pip3 path: $(which pip3)"
        python3 -c 'import numpy ; print("numpy.__version__:", numpy.__version__)'
        echo "pytest path: $(which pytest)"
        echo "pytest version: $(pytest --version)"
        echo "clang-tidy path: $(which clang-tidy)"
        echo "clang-tidy version: $(clang-tidy -version)"
        echo "flake8 path: $(which flake8)"
        echo "flake8 version: $(flake8 --version)"

    - name: buildext
      run: |
        make buildext \
          VERBOSE=1 USE_CLANG_TIDY=ON \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

    - name: pytest
      run: |
        make pytest \
          VERBOSE=1 USE_CLANG_TIDY=ON \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"

    - name: flake8
      run: |
        make flake8 \
          VERBOSE=1 \
          CMAKE_BUILD_TYPE=${{ matrix.cmake_build_type }} \
          CMAKE_ARGS="-DPYTHON_EXECUTABLE=$(which python3)"
